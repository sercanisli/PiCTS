// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PiCTS.Repositories.EntityFrameworkCore;

namespace PiCTS.WebAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240527105910_RefactorForRoots")]
    partial class RefactorForRoots
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "ff28c058-62df-41a9-a585-2acc78297da3",
                            ConcurrencyStamp = "e12768ae-a073-4582-9b20-8380ec9cf009",
                            Name = "CreateUser",
                            NormalizedName = "CREATEUSER"
                        },
                        new
                        {
                            Id = "1a85d29d-0fa8-46d1-bc4f-1f92cb71f976",
                            ConcurrencyStamp = "88aa1520-5baa-4702-9284-83a87f931670",
                            Name = "EditUser",
                            NormalizedName = "EDITUSER"
                        },
                        new
                        {
                            Id = "59472484-c9ca-47e4-9b96-d9af895f6625",
                            ConcurrencyStamp = "58caa518-4c9e-4d83-9bd7-ef04f7e7fbf7",
                            Name = "DeleteUser",
                            NormalizedName = "DELETEUSER"
                        },
                        new
                        {
                            Id = "edd3914c-2115-4a2b-8d10-66c5fdea801a",
                            ConcurrencyStamp = "0c4aed99-0753-4006-a726-9b37e804f478",
                            Name = "ReadUser",
                            NormalizedName = "READUSER"
                        },
                        new
                        {
                            Id = "bbba959f-e863-4ec2-88a7-8a89aefafc1c",
                            ConcurrencyStamp = "f41772c8-569d-48e7-9006-23bf4aba5939",
                            Name = "CreateCompany",
                            NormalizedName = "CREATECOMPANY"
                        },
                        new
                        {
                            Id = "15a7efc6-845d-474d-b2f7-27db8a41786c",
                            ConcurrencyStamp = "28ae7c6f-494c-4aab-8486-733830729d0c",
                            Name = "EditCompany",
                            NormalizedName = "EDITCOMPANY"
                        },
                        new
                        {
                            Id = "04a2ce30-0c35-4dda-8b1b-34c257143b2e",
                            ConcurrencyStamp = "83465456-2ec5-4371-ba29-39453f802aba",
                            Name = "DeleteCompany",
                            NormalizedName = "DELETECOMPANY"
                        },
                        new
                        {
                            Id = "d7c79344-7148-49b3-b6f5-9612624f2829",
                            ConcurrencyStamp = "26953e09-fb7a-492d-a9ea-d7368ad908f4",
                            Name = "ReadCompany",
                            NormalizedName = "READCOMPANY"
                        },
                        new
                        {
                            Id = "137b4a1b-10f5-43a8-b73d-690b63511830",
                            ConcurrencyStamp = "5ce7639c-ee33-40f4-9c39-2cb0f4da5ab5",
                            Name = "CreateBranch",
                            NormalizedName = "CREATEBRANCH"
                        },
                        new
                        {
                            Id = "c80adb1c-ea46-440d-9f9a-6692d11d86fa",
                            ConcurrencyStamp = "f3cf17b0-fc6c-48ac-8b88-bd1c443fecd4",
                            Name = "EditBranch",
                            NormalizedName = "EDITBRANCH"
                        },
                        new
                        {
                            Id = "0c1792d7-a909-4f3b-9512-34219d0c8e08",
                            ConcurrencyStamp = "f86db681-5ffd-4def-9192-e7fdb8b5df31",
                            Name = "DeleteBranch",
                            NormalizedName = "DELETEBRANCH"
                        },
                        new
                        {
                            Id = "336e9fff-7d22-4f7b-af37-9eec8e1ab27b",
                            ConcurrencyStamp = "6637f6f7-f953-4469-a3f7-360b2349a258",
                            Name = "ReadBranch",
                            NormalizedName = "READBRANCH"
                        },
                        new
                        {
                            Id = "57776eda-8407-43f8-b628-208a4ca29715",
                            ConcurrencyStamp = "41a38b23-4465-48d2-92f7-2ce0299c0e33",
                            Name = "CreatePerson",
                            NormalizedName = "CREATEPERSON"
                        },
                        new
                        {
                            Id = "f0e4f569-92a2-4cad-8dcb-d5cd8b6d72c0",
                            ConcurrencyStamp = "594f75b3-2d1a-4a3c-80e5-83407a5e6322",
                            Name = "EditPerson",
                            NormalizedName = "EDITPERSON"
                        },
                        new
                        {
                            Id = "de577998-3618-4aa0-ae0a-3cc11bfe2684",
                            ConcurrencyStamp = "37d70df4-9ec0-467f-8e22-d0a3b5f41df8",
                            Name = "DeletePerson",
                            NormalizedName = "DELETEPERSON"
                        },
                        new
                        {
                            Id = "215fe2bf-9635-4b2e-be20-30ab8e5bfd9c",
                            ConcurrencyStamp = "9afc3255-9cdb-4e13-9e46-69470b15b641",
                            Name = "ReadPerson",
                            NormalizedName = "READPERSON"
                        },
                        new
                        {
                            Id = "550833cd-a594-4641-895c-177a0de5d30f",
                            ConcurrencyStamp = "3c39d9c4-6476-48c9-97b2-daace1dbd11f",
                            Name = "CreateConnection",
                            NormalizedName = "CREATECONNECTION"
                        },
                        new
                        {
                            Id = "58206b35-a8f6-4c70-8d22-ae8085a28030",
                            ConcurrencyStamp = "a900a693-8b27-4aca-9406-e4be68812d99",
                            Name = "EditConnection",
                            NormalizedName = "EDITCONNECTION"
                        },
                        new
                        {
                            Id = "f74c0f91-1c47-4151-aca9-7a6a9f02d5ff",
                            ConcurrencyStamp = "34cfcfe2-d90e-48d0-9e10-b59dd123282a",
                            Name = "DeleteConnection",
                            NormalizedName = "DELETECONNECTION"
                        },
                        new
                        {
                            Id = "1e590df4-b219-4bda-b2c0-64d245c47da0",
                            ConcurrencyStamp = "490d53d7-77f8-4aa5-84c8-80f4272bf9ff",
                            Name = "ReadConnection",
                            NormalizedName = "READCONNECTION"
                        },
                        new
                        {
                            Id = "a65c1683-2ed8-4d25-b68a-4fec58275174",
                            ConcurrencyStamp = "d682fb53-f425-4b65-a946-bbec521f96ad",
                            Name = "CreateConnectionType",
                            NormalizedName = "CREATECONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "459bbe26-0d34-4eb2-9f7b-8ab5cb574000",
                            ConcurrencyStamp = "36f45496-bcc1-4f98-9c0a-12b4a519c28a",
                            Name = "EditConnectionType",
                            NormalizedName = "EDITCONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "77b4bb9a-3f59-4638-9d27-bf3ea5d190f8",
                            ConcurrencyStamp = "95112a9e-37a1-4b50-871f-34a831ca74b8",
                            Name = "DeleteConnectionType",
                            NormalizedName = "DELETECONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "6ecda2e4-3600-4ceb-a54d-98bf04568d0d",
                            ConcurrencyStamp = "87334c6a-09a9-43ae-9e1f-0384fba0246d",
                            Name = "ReadConnectionType",
                            NormalizedName = "READCONNECTIONTYPE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.ChildRoot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainRootId")
                        .HasColumnType("int");

                    b.Property<bool>("PartialChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainRootId");

                    b.ToTable("ChildRoots");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ConnectionTypeId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("ConnectionTypes");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.MainRoot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PartialChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MainRoots");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ParentKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Branch", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.ChildRoot", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.MainRoot", "MainRoot")
                        .WithMany("ChildRoots")
                        .HasForeignKey("MainRootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainRoot");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Connection", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiCTS.Entities.Models.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("ConnectionType");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Person", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.MainRoot", b =>
                {
                    b.Navigation("ChildRoots");
                });
#pragma warning restore 612, 618
        }
    }
}
