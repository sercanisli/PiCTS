// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PiCTS.Repositories.EntityFrameworkCore;

namespace PiCTS.WebAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240520142902_refactoringForUser")]
    partial class refactoringForUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b50ea778-ffe8-44f5-8054-dd3a27f9cbe8",
                            ConcurrencyStamp = "12ed4893-54bc-46b5-9cab-b6d4c80173c9",
                            Name = "CreateUser",
                            NormalizedName = "CREATEUSER"
                        },
                        new
                        {
                            Id = "be0a965e-4a3e-4a62-b221-e2171f2b4939",
                            ConcurrencyStamp = "99e4caf7-e68d-4d41-b281-261fe3dbe516",
                            Name = "EditUser",
                            NormalizedName = "EDITUSER"
                        },
                        new
                        {
                            Id = "d4c6b743-faff-44af-abdc-8f98317e18b3",
                            ConcurrencyStamp = "21eca79d-6a82-4436-a066-c264484e96e3",
                            Name = "DeleteUser",
                            NormalizedName = "DELETEUSER"
                        },
                        new
                        {
                            Id = "a27de950-f7e8-4f68-81e5-7f368da0db2c",
                            ConcurrencyStamp = "a69d60be-319b-4b72-88c2-60c80f00fb02",
                            Name = "ReadUser",
                            NormalizedName = "READUSER"
                        },
                        new
                        {
                            Id = "b834559b-bdb0-4f3e-be25-1ef17f43378b",
                            ConcurrencyStamp = "293f84a0-5ab7-4e0d-a473-8ee42e5505c0",
                            Name = "CreateCompany",
                            NormalizedName = "CREATECOMPANY"
                        },
                        new
                        {
                            Id = "4439b8c3-f704-4495-a991-a11fe244886b",
                            ConcurrencyStamp = "80578a33-157b-4ab6-a92a-67bd6224db20",
                            Name = "EditCompany",
                            NormalizedName = "EDITCOMPANY"
                        },
                        new
                        {
                            Id = "9d3d18c2-b5d2-4d0e-a305-b3dbe8979623",
                            ConcurrencyStamp = "fe23e61f-e606-4b40-90a1-c212e48a7af8",
                            Name = "DeleteCompany",
                            NormalizedName = "DELETECOMPANY"
                        },
                        new
                        {
                            Id = "1021b178-4de9-427d-b3c9-558842d8d2dc",
                            ConcurrencyStamp = "31f3db01-b82c-4f37-8394-6f9799166711",
                            Name = "ReadCompany",
                            NormalizedName = "READCOMPANY"
                        },
                        new
                        {
                            Id = "eb92abc2-e502-434b-ad2e-3bf0ba4f5f22",
                            ConcurrencyStamp = "1abbef1d-d592-44f6-862a-c0d46e78e3e7",
                            Name = "CreateBranch",
                            NormalizedName = "CREATEBRANCH"
                        },
                        new
                        {
                            Id = "9c750bb8-af11-4daf-9f63-c2315b8380b2",
                            ConcurrencyStamp = "127d6022-290b-4ef8-8748-c99d1a0dc890",
                            Name = "EditBranch",
                            NormalizedName = "EDITBRANCH"
                        },
                        new
                        {
                            Id = "70244936-b91c-43b2-b8d4-55b4420f4547",
                            ConcurrencyStamp = "566f8639-0141-485c-b1ab-bc10ff1f9ea8",
                            Name = "DeleteBranch",
                            NormalizedName = "DELETEBRANCH"
                        },
                        new
                        {
                            Id = "24ae883a-6623-4a89-97b9-988d524975ee",
                            ConcurrencyStamp = "770511d2-d9e8-4910-a52d-64564cac47c5",
                            Name = "ReadBranch",
                            NormalizedName = "READBRANCH"
                        },
                        new
                        {
                            Id = "0ea86a14-7d6e-48ab-96b5-d654a185b6c4",
                            ConcurrencyStamp = "b7a8ef63-8585-4889-a5f7-5e9014b95931",
                            Name = "CreatePerson",
                            NormalizedName = "CREATEPERSON"
                        },
                        new
                        {
                            Id = "573c29a4-f53d-4988-95c4-24b8c523b959",
                            ConcurrencyStamp = "002d12b8-a2dc-4def-b5c1-f25caa4993dc",
                            Name = "EditPerson",
                            NormalizedName = "EDITPERSON"
                        },
                        new
                        {
                            Id = "0d19ab6a-2054-4947-84b1-41c875701cbb",
                            ConcurrencyStamp = "130f41dc-a3f3-425c-9d60-91210847acc7",
                            Name = "DeletePerson",
                            NormalizedName = "DELETEPERSON"
                        },
                        new
                        {
                            Id = "861e41bc-98ac-4f57-badf-30c1557fd941",
                            ConcurrencyStamp = "cda3d5bc-4345-4380-8872-42dcd0617cc2",
                            Name = "ReadPerson",
                            NormalizedName = "READPERSON"
                        },
                        new
                        {
                            Id = "4d8db8ba-48e5-4ca1-8f4d-134345bb4024",
                            ConcurrencyStamp = "a1c0e833-b4e6-476d-af96-c93f5dbafe1a",
                            Name = "CreateConnection",
                            NormalizedName = "CREATECONNECTION"
                        },
                        new
                        {
                            Id = "18c836c6-eef7-4e22-9814-0a0ee514d22c",
                            ConcurrencyStamp = "69e28b43-5d16-4d3e-af91-6754be231f1e",
                            Name = "EditConnection",
                            NormalizedName = "EDITCONNECTION"
                        },
                        new
                        {
                            Id = "b73df39e-c660-48f5-950c-c7a523c7dc07",
                            ConcurrencyStamp = "1932ef8a-7835-4535-946f-6f9da6349318",
                            Name = "DeleteConnection",
                            NormalizedName = "DELETECONNECTION"
                        },
                        new
                        {
                            Id = "6c739616-f13c-4eb9-986a-bf7b7c6dfdc1",
                            ConcurrencyStamp = "66a69977-e58a-418c-a7ae-ee368b001202",
                            Name = "ReadConnection",
                            NormalizedName = "READCONNECTION"
                        },
                        new
                        {
                            Id = "38fe8663-7640-40ad-b60e-ca479c8d4b44",
                            ConcurrencyStamp = "307f915f-23ac-49c6-9598-83dab9b700de",
                            Name = "CreateConnectionType",
                            NormalizedName = "CREATECONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "0763f1b9-43b3-4850-a179-3483d6c51bc7",
                            ConcurrencyStamp = "fbe23d1d-5523-4434-a68d-614cd6f93049",
                            Name = "EditConnectionType",
                            NormalizedName = "EDITCONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "3ddefd1f-70b6-4fdb-9c5e-28bf9a5fbf78",
                            ConcurrencyStamp = "0c340ee4-8610-48f4-8ab4-547c1d6cbe60",
                            Name = "DeleteConnectionType",
                            NormalizedName = "DELETECONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "822fa8a5-e221-44d8-bd4e-4a332d0094b5",
                            ConcurrencyStamp = "20844dbc-318f-4723-b5a6-321405afe321",
                            Name = "ReadConnectionType",
                            NormalizedName = "READCONNECTIONTYPE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ConnectionTypeId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("ConnectionTypes");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Branch", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Connection", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiCTS.Entities.Models.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("ConnectionType");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Person", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });
#pragma warning restore 612, 618
        }
    }
}
