// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PiCTS.Repositories.EntityFrameworkCore;

namespace PiCTS.WebAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240517140026_addRefreshTokenFields")]
    partial class addRefreshTokenFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "6b2b347e-89a5-43c9-bf14-79f66bf6c451",
                            ConcurrencyStamp = "bd91643d-6630-4f14-a541-35e86be5c45f",
                            Name = "CreateUser",
                            NormalizedName = "CREATEUSER"
                        },
                        new
                        {
                            Id = "ef86fd5f-310f-4989-9be1-0ebf7e6511df",
                            ConcurrencyStamp = "9053eaef-012c-4177-9bf0-05b2a51258c6",
                            Name = "EditUser",
                            NormalizedName = "EDITUSER"
                        },
                        new
                        {
                            Id = "614e0fb5-6ec4-4956-9663-6a58be3318e3",
                            ConcurrencyStamp = "9da1a2de-ad25-46ed-a5f7-d2aa88f22bd2",
                            Name = "DeleteUser",
                            NormalizedName = "DELETEUSER"
                        },
                        new
                        {
                            Id = "9cc1b82e-efeb-4e73-9f7e-3c564ab024fc",
                            ConcurrencyStamp = "ea9276c8-c2a5-4ec5-98a5-35d54f0b421c",
                            Name = "ReadUser",
                            NormalizedName = "READUSER"
                        },
                        new
                        {
                            Id = "1aed294f-1259-4cce-acc4-4293724795ed",
                            ConcurrencyStamp = "89aa6bfc-7688-4abb-9637-d625c9132bc3",
                            Name = "CreateCompany",
                            NormalizedName = "CREATECOMPANY"
                        },
                        new
                        {
                            Id = "c6499e2f-607a-4f65-a131-86b238809d04",
                            ConcurrencyStamp = "43fe6cc3-0195-42d5-bd24-bf2434755f9f",
                            Name = "EditCompany",
                            NormalizedName = "EDITCOMPANY"
                        },
                        new
                        {
                            Id = "1ae46b18-338b-4d22-971c-ebf50a74407c",
                            ConcurrencyStamp = "83267a65-0c57-4fdb-8af2-432c5a6bc550",
                            Name = "DeleteCompany",
                            NormalizedName = "DELETECOMPANY"
                        },
                        new
                        {
                            Id = "dd28dc3c-2c23-4acd-96b4-b88ebedd32fd",
                            ConcurrencyStamp = "303f9269-e4bd-4dae-93a3-1c5fe40f7044",
                            Name = "ReadCompany",
                            NormalizedName = "READCOMPANY"
                        },
                        new
                        {
                            Id = "6b5ad876-85d2-4a0a-95c9-ea0de6948fd8",
                            ConcurrencyStamp = "9b0ef9db-c38b-44a7-9ac3-c4423b5cfcc8",
                            Name = "CreateBranch",
                            NormalizedName = "CREATEBRANCH"
                        },
                        new
                        {
                            Id = "7c118c5b-4f10-4ce2-a94b-6ceaa6ed670d",
                            ConcurrencyStamp = "7312d108-d16f-47b5-af96-e0717276f469",
                            Name = "EditBranch",
                            NormalizedName = "EDITBRANCH"
                        },
                        new
                        {
                            Id = "fb815bb4-0f72-40a9-99db-fdaa27a38ec9",
                            ConcurrencyStamp = "d4f4e540-1abc-46f6-8f17-19e404af0659",
                            Name = "DeleteBranch",
                            NormalizedName = "DELETEBRANCH"
                        },
                        new
                        {
                            Id = "8877297b-b927-4766-9762-fcf221173de3",
                            ConcurrencyStamp = "facd925e-1c9c-4b16-9b99-eba46136cab7",
                            Name = "ReadBranch",
                            NormalizedName = "READBRANCH"
                        },
                        new
                        {
                            Id = "ffa1753b-e28a-4d07-9779-a4891e7ed204",
                            ConcurrencyStamp = "e9b51326-5769-4609-a47d-3ad666b3209f",
                            Name = "CreatePerson",
                            NormalizedName = "CREATEPERSON"
                        },
                        new
                        {
                            Id = "285fd58d-dbac-44ba-bca0-eaebcc521f12",
                            ConcurrencyStamp = "c844e843-6f2b-4635-a118-198681006fed",
                            Name = "EditPerson",
                            NormalizedName = "EDITPERSON"
                        },
                        new
                        {
                            Id = "4ac97d64-5896-4ec4-a64a-65d520389a06",
                            ConcurrencyStamp = "e4a30a1f-d071-424d-a049-9d8cd42e5729",
                            Name = "DeletePerson",
                            NormalizedName = "DELETEPERSON"
                        },
                        new
                        {
                            Id = "3b4b961a-475d-46a6-86c7-1aebd91baca3",
                            ConcurrencyStamp = "973044b1-5599-4a8d-9683-0ca5813c51ca",
                            Name = "ReadPerson",
                            NormalizedName = "READPERSON"
                        },
                        new
                        {
                            Id = "276fc5e2-e311-4c89-bf65-a65f62fa8322",
                            ConcurrencyStamp = "2eca7854-a0b1-4958-85c2-3b78ad3a622d",
                            Name = "CreateConnection",
                            NormalizedName = "CREATECONNECTION"
                        },
                        new
                        {
                            Id = "a690659c-d84a-41ea-bef5-2c1bdcf59401",
                            ConcurrencyStamp = "80a54e7f-6693-4ea1-9a96-f982f28d3c0f",
                            Name = "EditConnection",
                            NormalizedName = "EDITCONNECTION"
                        },
                        new
                        {
                            Id = "66077ef4-6cdf-4e68-ba4b-ce95714a2aef",
                            ConcurrencyStamp = "de2db42a-f1b9-4327-8992-779e83843a08",
                            Name = "DeleteConnection",
                            NormalizedName = "DELETECONNECTION"
                        },
                        new
                        {
                            Id = "5dd047e3-2759-4141-928e-5a9264333dac",
                            ConcurrencyStamp = "cb04b0d8-c8aa-41bc-b494-33a4e174433c",
                            Name = "ReadConnection",
                            NormalizedName = "READCONNECTION"
                        },
                        new
                        {
                            Id = "a45ce565-90e7-496f-9a8c-6c4569e85c75",
                            ConcurrencyStamp = "02b2d369-9d3a-4591-b55a-f85b43a06710",
                            Name = "CreateConnectionType",
                            NormalizedName = "CREATECONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "b2907576-4487-4b2d-87b9-ef1ecc453307",
                            ConcurrencyStamp = "15d2b1cb-1405-46de-8a05-a0e6760ed388",
                            Name = "EditConnectionType",
                            NormalizedName = "EDITCONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "db8f618d-f3de-4619-8bee-7f8caa7697a0",
                            ConcurrencyStamp = "a52df2c1-cc7c-4420-b432-69d98def9fea",
                            Name = "DeleteConnectionType",
                            NormalizedName = "DELETECONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "4355a380-dfc4-476d-8d9b-bf7fc91416d0",
                            ConcurrencyStamp = "fc8a9655-056f-429d-becd-53b3d35f9591",
                            Name = "ReadConnectionType",
                            NormalizedName = "READCONNECTIONTYPE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ConnectionTypeId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("ConnectionTypes");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Branch", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Connection", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiCTS.Entities.Models.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("ConnectionType");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Person", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });
#pragma warning restore 612, 618
        }
    }
}
