// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PiCTS.Repositories.EntityFrameworkCore;

namespace PiCTS.WebAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240528115324_RefactoringForMainRoot3")]
    partial class RefactoringForMainRoot3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "f486736d-a313-4071-96fd-191c5387d1b8",
                            ConcurrencyStamp = "e7aa8975-521b-4955-bf75-64076756e84b",
                            Name = "CreateUser",
                            NormalizedName = "CREATEUSER"
                        },
                        new
                        {
                            Id = "b7b3a561-3912-44ef-9a41-017588185607",
                            ConcurrencyStamp = "1aff0177-6ef4-4550-afc3-1813c359b44b",
                            Name = "EditUser",
                            NormalizedName = "EDITUSER"
                        },
                        new
                        {
                            Id = "9c37b6af-a70d-4963-abfd-cf54476fefb5",
                            ConcurrencyStamp = "7b0f409e-baa1-44b0-bed6-ae8139add974",
                            Name = "DeleteUser",
                            NormalizedName = "DELETEUSER"
                        },
                        new
                        {
                            Id = "e3024863-bc88-4727-af3f-c4dc1a16d783",
                            ConcurrencyStamp = "1bf30f38-246f-4f71-b901-3603f5516852",
                            Name = "ReadUser",
                            NormalizedName = "READUSER"
                        },
                        new
                        {
                            Id = "3706fcbf-b1d8-4397-940c-0c57381e6792",
                            ConcurrencyStamp = "112e2102-2fbc-469f-a468-c3baf1c9febc",
                            Name = "CreateCompany",
                            NormalizedName = "CREATECOMPANY"
                        },
                        new
                        {
                            Id = "994650da-770b-460a-8d0a-3c89a75c14f3",
                            ConcurrencyStamp = "b197319f-5456-4a9e-8afa-e028859c9fcc",
                            Name = "EditCompany",
                            NormalizedName = "EDITCOMPANY"
                        },
                        new
                        {
                            Id = "c953aa2f-e724-4d63-a25e-5c93967a432b",
                            ConcurrencyStamp = "b5746eaf-1738-4a8d-a421-896dc3fa2d2b",
                            Name = "DeleteCompany",
                            NormalizedName = "DELETECOMPANY"
                        },
                        new
                        {
                            Id = "f2b974a7-f7e9-48c4-bd76-70284ffd8526",
                            ConcurrencyStamp = "7a8c171a-e838-4857-a5cb-93ccefcb5bee",
                            Name = "ReadCompany",
                            NormalizedName = "READCOMPANY"
                        },
                        new
                        {
                            Id = "bc4b41d7-1bd8-4c00-8765-a93d64930406",
                            ConcurrencyStamp = "c275824b-b3e0-4507-af84-aa67e4baed35",
                            Name = "CreateBranch",
                            NormalizedName = "CREATEBRANCH"
                        },
                        new
                        {
                            Id = "39d51e69-8911-4b6d-97ee-9e542e766b0e",
                            ConcurrencyStamp = "dc21f1c8-5dee-4d0e-bee3-6d18f5141556",
                            Name = "EditBranch",
                            NormalizedName = "EDITBRANCH"
                        },
                        new
                        {
                            Id = "076253a0-0536-46ce-bda9-b3866c1ede6a",
                            ConcurrencyStamp = "1884ccd9-5ec2-4a48-be74-c91246f605ef",
                            Name = "DeleteBranch",
                            NormalizedName = "DELETEBRANCH"
                        },
                        new
                        {
                            Id = "e44760a0-6348-49dc-9658-8dc1f47ad1bb",
                            ConcurrencyStamp = "e9e19f2d-85ed-43d9-b441-f91c80db2d24",
                            Name = "ReadBranch",
                            NormalizedName = "READBRANCH"
                        },
                        new
                        {
                            Id = "b6cf1f23-20bd-4900-84b2-7b32cd1bc160",
                            ConcurrencyStamp = "0218848a-b18b-4821-a54f-84e7c16ca940",
                            Name = "CreatePerson",
                            NormalizedName = "CREATEPERSON"
                        },
                        new
                        {
                            Id = "180cdc5e-b934-4361-94c4-8a5f20efe288",
                            ConcurrencyStamp = "9c2eff0e-ef90-47ff-a78d-21339532697b",
                            Name = "EditPerson",
                            NormalizedName = "EDITPERSON"
                        },
                        new
                        {
                            Id = "623fb41f-8171-4068-8ece-28f472c99300",
                            ConcurrencyStamp = "14f9a36f-82e1-49d8-ac0e-8943f341c063",
                            Name = "DeletePerson",
                            NormalizedName = "DELETEPERSON"
                        },
                        new
                        {
                            Id = "3c2f2a8c-7b6a-47cf-9ef8-2a6f38e544c3",
                            ConcurrencyStamp = "49b8f728-3713-49b0-8146-9835a9f6ac94",
                            Name = "ReadPerson",
                            NormalizedName = "READPERSON"
                        },
                        new
                        {
                            Id = "ad1c68a3-47a0-443a-b2c3-3df005396a64",
                            ConcurrencyStamp = "65380c0c-5141-4d5f-9e0e-f6fc0f7ddb4e",
                            Name = "CreateConnection",
                            NormalizedName = "CREATECONNECTION"
                        },
                        new
                        {
                            Id = "06f564dc-8d39-4e66-870f-abb77626996f",
                            ConcurrencyStamp = "3d55196f-8b3d-4915-972f-4b0adc858475",
                            Name = "EditConnection",
                            NormalizedName = "EDITCONNECTION"
                        },
                        new
                        {
                            Id = "353c95fa-45cf-4f9c-80cb-36cdbedff1bc",
                            ConcurrencyStamp = "504f4a70-02f8-45f6-8e7f-d2d371b47417",
                            Name = "DeleteConnection",
                            NormalizedName = "DELETECONNECTION"
                        },
                        new
                        {
                            Id = "21c5fa8d-8511-4199-a083-cda68d49a185",
                            ConcurrencyStamp = "2de5fb47-0a8f-4242-8e1c-dcb7d289e0de",
                            Name = "ReadConnection",
                            NormalizedName = "READCONNECTION"
                        },
                        new
                        {
                            Id = "8ac2c3e3-a297-4756-8660-359461b28de5",
                            ConcurrencyStamp = "be34cb27-3915-4b65-95b9-2d5d638a58d3",
                            Name = "CreateConnectionType",
                            NormalizedName = "CREATECONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "7b2035d8-5e7e-47ff-80b7-d3c603fc6464",
                            ConcurrencyStamp = "b94eb2e1-6373-4ee8-932d-4cc4c84611dc",
                            Name = "EditConnectionType",
                            NormalizedName = "EDITCONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "aa0755de-32bf-40b2-8f52-4ea360c04fbb",
                            ConcurrencyStamp = "7fc320c7-9517-490f-9104-1ea65cd6ac03",
                            Name = "DeleteConnectionType",
                            NormalizedName = "DELETECONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "b5780e29-5d46-4bdc-9da1-0b3fb4c07d58",
                            ConcurrencyStamp = "545cfa1a-4978-4892-87b4-b76a84ae89e4",
                            Name = "ReadConnectionType",
                            NormalizedName = "READCONNECTIONTYPE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.ChildRoot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainRootId")
                        .HasColumnType("int");

                    b.Property<bool>("PartialChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainRootId");

                    b.ToTable("ChildRoots");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ConnectionTypeId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("ConnectionTypes");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.MainRoot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PartialChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MainRoots");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ParentKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Branch", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.ChildRoot", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.MainRoot", null)
                        .WithMany("Children")
                        .HasForeignKey("MainRootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Connection", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiCTS.Entities.Models.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("ConnectionType");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Person", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.MainRoot", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
