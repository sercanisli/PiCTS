// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PiCTS.Repositories.EntityFrameworkCore;

namespace PiCTS.WebAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240521063528_add-migration refactorinForUserEntity")]
    partial class addmigrationrefactorinForUserEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "9f594b03-d406-48f3-abe7-f6e999bda39a",
                            ConcurrencyStamp = "aa703dda-f5d7-4815-89e0-b0493829ad3b",
                            Name = "CreateUser",
                            NormalizedName = "CREATEUSER"
                        },
                        new
                        {
                            Id = "2a88c1c9-bfbd-4fdd-b987-5cae3b37b318",
                            ConcurrencyStamp = "d4aca387-f930-48ab-b3ae-8ed0fb22b6f3",
                            Name = "EditUser",
                            NormalizedName = "EDITUSER"
                        },
                        new
                        {
                            Id = "6d1ff09b-05d4-49b3-9910-205f4af0c060",
                            ConcurrencyStamp = "3252ea2a-1666-4d21-9f07-08b44a2578b6",
                            Name = "DeleteUser",
                            NormalizedName = "DELETEUSER"
                        },
                        new
                        {
                            Id = "19331728-4161-42fa-9e22-0ba9baef74fd",
                            ConcurrencyStamp = "0e663a09-3b3d-436f-b486-5f4a5a3c09a3",
                            Name = "ReadUser",
                            NormalizedName = "READUSER"
                        },
                        new
                        {
                            Id = "d57209dc-c477-43ee-bbb9-72d662842a7a",
                            ConcurrencyStamp = "8e7377dd-c8b0-4ce6-8057-98c93e1e8993",
                            Name = "CreateCompany",
                            NormalizedName = "CREATECOMPANY"
                        },
                        new
                        {
                            Id = "fc9c3828-d54a-4b0a-9092-118934fa2128",
                            ConcurrencyStamp = "b4c6dc4c-fc3b-45eb-ab4d-4bb17d1b8a4d",
                            Name = "EditCompany",
                            NormalizedName = "EDITCOMPANY"
                        },
                        new
                        {
                            Id = "fec29cda-50c1-42d4-bc18-4178bf145b71",
                            ConcurrencyStamp = "c11c2f7a-6b2d-4430-b764-e2a27c346524",
                            Name = "DeleteCompany",
                            NormalizedName = "DELETECOMPANY"
                        },
                        new
                        {
                            Id = "8f51aa0e-255b-4d9b-a360-4a9c5342e353",
                            ConcurrencyStamp = "f7eb7200-7d4f-4b5f-a05b-f4772a5ce4db",
                            Name = "ReadCompany",
                            NormalizedName = "READCOMPANY"
                        },
                        new
                        {
                            Id = "ed08ba42-4a50-4945-8bdb-80f1af21b6cd",
                            ConcurrencyStamp = "89526b4f-8231-41f5-9495-87d231c9ddaf",
                            Name = "CreateBranch",
                            NormalizedName = "CREATEBRANCH"
                        },
                        new
                        {
                            Id = "78d78279-e783-4748-8c36-2e00ee05561a",
                            ConcurrencyStamp = "a046d7d8-7c59-4eb8-a3e8-ebb9bcc8f839",
                            Name = "EditBranch",
                            NormalizedName = "EDITBRANCH"
                        },
                        new
                        {
                            Id = "5e223698-ee6e-4c27-99c4-a20bd8af77f3",
                            ConcurrencyStamp = "0aef7fc7-8766-4a1f-8d09-77646eb0df14",
                            Name = "DeleteBranch",
                            NormalizedName = "DELETEBRANCH"
                        },
                        new
                        {
                            Id = "ee18f032-f72b-475a-bff2-2b0eca000e4a",
                            ConcurrencyStamp = "9173c352-036a-4070-81b1-2ae43412919f",
                            Name = "ReadBranch",
                            NormalizedName = "READBRANCH"
                        },
                        new
                        {
                            Id = "011d71ac-bfa6-4a28-8a07-b59a52fd072a",
                            ConcurrencyStamp = "82f1d86d-a1c1-4c09-80f9-c5514ce493c8",
                            Name = "CreatePerson",
                            NormalizedName = "CREATEPERSON"
                        },
                        new
                        {
                            Id = "c02dc503-c957-4cdc-a7a4-755def05e33c",
                            ConcurrencyStamp = "e7d9c000-9e5b-4f07-b3da-7ae3c559f5b2",
                            Name = "EditPerson",
                            NormalizedName = "EDITPERSON"
                        },
                        new
                        {
                            Id = "d3589693-443b-4509-84c8-f2e93292567a",
                            ConcurrencyStamp = "2774e025-48d9-4777-94d2-01619f33bb0e",
                            Name = "DeletePerson",
                            NormalizedName = "DELETEPERSON"
                        },
                        new
                        {
                            Id = "e6fbd006-e536-42d3-aa1c-5124c01ad394",
                            ConcurrencyStamp = "404f249e-dec6-4185-9f15-0ca126dd945d",
                            Name = "ReadPerson",
                            NormalizedName = "READPERSON"
                        },
                        new
                        {
                            Id = "5f924847-4fb2-4d74-87fb-af25200dad75",
                            ConcurrencyStamp = "c61a2eac-3c28-465d-a071-6d5480575cc4",
                            Name = "CreateConnection",
                            NormalizedName = "CREATECONNECTION"
                        },
                        new
                        {
                            Id = "26e0eed0-a1e1-4cd3-8176-04667dbc4ab5",
                            ConcurrencyStamp = "9d09cf12-58e2-44b6-8060-0645a7757fd1",
                            Name = "EditConnection",
                            NormalizedName = "EDITCONNECTION"
                        },
                        new
                        {
                            Id = "1faee0a2-1483-4afc-86e3-fb2a400b0aa0",
                            ConcurrencyStamp = "5ddbc299-f51f-42f2-a5c9-645a09e5483a",
                            Name = "DeleteConnection",
                            NormalizedName = "DELETECONNECTION"
                        },
                        new
                        {
                            Id = "3cae14c6-d3b1-44c9-bd8e-bd19d2a97465",
                            ConcurrencyStamp = "79341433-747f-4abf-bbd6-7d9e8b2e2cba",
                            Name = "ReadConnection",
                            NormalizedName = "READCONNECTION"
                        },
                        new
                        {
                            Id = "c350dfa9-74eb-4c24-b21a-df91e753d421",
                            ConcurrencyStamp = "b5931e6b-fefd-4d2e-a235-3d869d981375",
                            Name = "CreateConnectionType",
                            NormalizedName = "CREATECONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "81f22f6f-1a39-438b-bf54-0dd6913daa1e",
                            ConcurrencyStamp = "52e1262a-e189-476d-bc90-edbeae40c960",
                            Name = "EditConnectionType",
                            NormalizedName = "EDITCONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "7c843011-d55c-49ab-8bae-88e0f6182f0c",
                            ConcurrencyStamp = "aebd9e37-af5e-458e-9549-525c6a56a3fd",
                            Name = "DeleteConnectionType",
                            NormalizedName = "DELETECONNECTIONTYPE"
                        },
                        new
                        {
                            Id = "d017308b-bf1e-4670-8079-0092b1ab3976",
                            ConcurrencyStamp = "6d244e6a-d5a5-4074-beaa-b6d0fda35a2b",
                            Name = "ReadConnectionType",
                            NormalizedName = "READCONNECTIONTYPE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ConnectionTypeId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("ConnectionTypes");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Branch", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Connection", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiCTS.Entities.Models.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("ConnectionType");
                });

            modelBuilder.Entity("PiCTS.Entities.Models.Person", b =>
                {
                    b.HasOne("PiCTS.Entities.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });
#pragma warning restore 612, 618
        }
    }
}
